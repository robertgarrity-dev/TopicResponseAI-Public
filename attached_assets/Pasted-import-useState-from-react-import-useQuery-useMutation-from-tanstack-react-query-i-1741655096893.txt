import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { insertBlogTopicSchema, type BlogTopic } from "@shared/schema";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ScrollArea } from "@/components/ui/scroll-area";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Wand2, Trash2, Loader2, Plus, Minus } from "lucide-react";
import { cn } from "@/lib/utils";

export default function Home() {
  const { toast } = useToast();
  const [selectedTopic, setSelectedTopic] = useState<BlogTopic | null>(null);
  const [generatingFor, setGeneratingFor] = useState<number | null>(null);
  const [selectedCategory, setSelectedCategory] = useState<string>("all");
  const [categoryType, setCategoryType] = useState<"existing" | "new" | null>(null);
  const [expandedSuggestions, setExpandedSuggestions] = useState<Set<number>>(new Set());

  // Toggle suggestion expansion
  const toggleSuggestion = (topicId: number) => {
    setExpandedSuggestions(prev => {
      const next = new Set(prev);
      if (next.has(topicId)) {
        next.delete(topicId);
      } else {
        next.add(topicId);
      }
      return next;
    });
  };

  const form = useForm({
    resolver: zodResolver(insertBlogTopicSchema),
    defaultValues: {
      title: "",
      description: "",
      category: "",
      categoryType: null as "existing" | "new" | null,
    },
  });

  const { data: topics, isLoading } = useQuery<BlogTopic[]>({
    queryKey: ["/api/topics"],
  });

  // Get unique categories from topics
  const categories = topics ? Array.from(new Set(topics.map(topic => topic.category))).sort() : [];

  // Filter topics based on selected category
  const filteredTopics = topics?.filter(topic =>
    selectedCategory === "all" || topic.category === selectedCategory
  );

  const createMutation = useMutation({
    mutationFn: async (data: any) => {
      if (!data.categoryType) {
        throw new Error("Please select whether to use an existing category or add a new one");
      }
      await apiRequest("POST", "/api/topics", data);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/topics"] });
      form.reset();
      toast({ title: "Topic created successfully" });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive"
      });
    }
  });

  const deleteMutation = useMutation({
    mutationFn: async (id: number) => {
      await apiRequest("DELETE", `/api/topics/${id}`);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/topics"] });
      toast({ title: "Topic deleted successfully" });
    },
  });

  const generateSuggestionsMutation = useMutation({
    mutationFn: async (id: number) => {
      setGeneratingFor(id);
      const response = await apiRequest("POST", `/api/topics/${id}/suggestions`);
      const data = await response.json();
      setGeneratingFor(null);
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/topics"] });
      toast({
        title: "Success",
        description: "AI suggestions generated successfully"
      });
    },
    onError: (error: Error) => {
      setGeneratingFor(null);
      // Parse the error response if it's a JSON string
      let errorMsg = error.message;
      try {
        const jsonStart = errorMsg.indexOf('{');
        if (jsonStart !== -1) {
          const errorData = JSON.parse(errorMsg.slice(jsonStart));
          errorMsg = errorData.error.split(':')[0]; // Get just the main error message
        }
      } catch (e) {
        // If parsing fails, use the original message
      }

      toast({
        title: "⚠️ AI Service Rate Limited",
        description: "This is a demonstration application with intentional rate limits.\n\nPlease wait 60 seconds before trying again.\n\nError details:\n" + errorMsg,
        variant: "destructive",
        className: "select-text max-w-[500px]",
        duration: 10000 // Show for 10 seconds
      });
    }
  });

  return (
    <div className="container mx-auto p-4 max-w-7xl">
      <div className="grid md:grid-cols-2 gap-6">
        {/* Create Topic Form */}
        <Card>
          <CardHeader>
            <CardTitle>Create New Topic</CardTitle>
          </CardHeader>
          <CardContent>
            <Form {...form}>
              <form onSubmit={form.handleSubmit((data) => createMutation.mutate(data))} className="space-y-4">
                <FormField
                  control={form.control}
                  name="title"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Title</FormLabel>
                      <FormControl>
                        <Input {...field} />
                      </FormControl>
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Description</FormLabel>
                      <FormControl>
                        <Textarea {...field} />
                      </FormControl>
                    </FormItem>
                  )}
                />

                {/* Category Type Selection */}
                <FormField
                  control={form.control}
                  name="categoryType"
                  render={({ field }) => (
                    <FormItem className="space-y-3">
                      <FormLabel>Category Selection</FormLabel>
                      <FormControl>
                        <RadioGroup
                          onValueChange={(value) => {
                            field.onChange(value);
                            setCategoryType(value as "existing" | "new");
                            // Reset category when switching types
                            form.setValue("category", "");
                          }}
                          value={field.value}
                          className="flex flex-col space-y-1"
                        >
                          <FormItem className="flex items-center space-x-3 space-y-0">
                            <FormControl>
                              <RadioGroupItem value="existing" />
                            </FormControl>
                            <FormLabel className="font-normal">
                              Use an existing category
                            </FormLabel>
                          </FormItem>
                          <FormItem className="flex items-center space-x-3 space-y-0">
                            <FormControl>
                              <RadioGroupItem value="new" />
                            </FormControl>
                            <FormLabel className="font-normal">
                              Add a new category
                            </FormLabel>
                          </FormItem>
                        </RadioGroup>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Conditional Category Input */}
                <FormField
                  control={form.control}
                  name="category"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Category</FormLabel>
                      <FormControl>
                        {categoryType === "existing" ? (
                          <Select
                            onValueChange={field.onChange}
                            value={field.value}
                          >
                            <SelectTrigger>
                              <SelectValue placeholder="Select a category" />
                            </SelectTrigger>
                            <SelectContent>
                              <ScrollArea className="h-[200px]">
                                {categories.map((category) => (
                                  <SelectItem key={category} value={category}>
                                    {category}
                                  </SelectItem>
                                ))}
                              </ScrollArea>
                            </SelectContent>
                          </Select>
                        ) : categoryType === "new" ? (
                          <Input {...field} placeholder="Enter new category" />
                        ) : (
                          <Input {...field} disabled placeholder="Select a category type above" />
                        )}
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <Button type="submit" disabled={createMutation.isPending}>
                  Create Topic
                </Button>
              </form>
            </Form>
          </CardContent>
        </Card>

        {/* Topics List */}
        <div className="space-y-4">
          <div className="flex justify-between items-center">
            <h2 className="text-2xl font-bold">Topics</h2>
            <Select value={selectedCategory} onValueChange={setSelectedCategory}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Select category" />
              </SelectTrigger>
              <SelectContent>
                <ScrollArea className="h-[200px]">
                  <SelectItem value="all">All Categories</SelectItem>
                  {categories.map((category) => (
                    <SelectItem key={category} value={category}>
                      {category}
                    </SelectItem>
                  ))}
                </ScrollArea>
              </SelectContent>
            </Select>
          </div>
          {isLoading ? (
            <div className="flex justify-center items-center h-16">
              <Loader2 className="h-6 w-6 animate-spin text-primary" />
            </div>
          ) : (
            filteredTopics?.map((topic) => (
              <Card key={topic.id} className="relative">
                <CardContent className="pt-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h3 className="font-semibold">{topic.title}</h3>
                      <p className="text-sm text-muted-foreground mt-1">{topic.description}</p>
                      <span className="inline-block mt-2 text-xs bg-primary/10 text-primary px-2 py-1 rounded">
                        {topic.category}
                      </span>
                    </div>
                    <div className="flex gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => generateSuggestionsMutation.mutate(topic.id)}
                        disabled={generatingFor === topic.id}
                        className="flex items-center gap-2 min-w-[140px] justify-center"
                      >
                        {generatingFor === topic.id ? (
                          <>
                            <Loader2 className="h-4 w-4 animate-spin" />
                            <span>AI Working...</span>
                          </>
                        ) : (
                          <>
                            <Wand2 className="h-4 w-4" />
                            <span>Generate Ideas</span>
                          </>
                        )}
                      </Button>
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => deleteMutation.mutate(topic.id)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                  {topic.aiSuggestions && (
                    <div className="mt-4">
                      <Button
                        variant="ghost"
                        size="sm"
                        className="mb-2 p-0 h-auto hover:bg-transparent"
                        onClick={() => toggleSuggestion(topic.id)}
                      >
                        <div className="flex items-center gap-2 text-primary font-medium">
                          {expandedSuggestions.has(topic.id) ? (
                            <>
                              <Minus className="h-4 w-4" />
                              <span>Hide AI Suggestions</span>
                            </>
                          ) : (
                            <>
                              <Plus className="h-4 w-4" />
                              <span>Show AI Suggestions</span>
                            </>
                          )}
                        </div>
                      </Button>
                      <div className={cn(
                        "overflow-hidden transition-all duration-200",
                        expandedSuggestions.has(topic.id) ? "max-h-[2000px]" : "max-h-0"
                      )}>
                        <div className="p-4 bg-muted rounded-md space-y-2">
                          <div className="text-sm whitespace-pre-line prose prose-sm max-w-none prose-p:my-2 prose-ul:my-2 prose-li:my-0.5">
                            {topic.aiSuggestions.split('•').map((point, index) => {
                              if (index === 0) {
                                // Handle warning message if present
                                if (point.includes("⚠️")) {
                                  const [warning, ...rest] = point.split("\n\n");
                                  return (
                                    <div key="warning">
                                      <div className="text-yellow-600 dark:text-yellow-500 font-medium mb-3 p-2 bg-yellow-50 dark:bg-yellow-900/10 rounded">
                                        {warning.trim()}
                                      </div>
                                      {rest.length > 0 && <p>{rest.join("\n\n").trim()}</p>}
                                    </div>
                                  );
                                }
                                return point.trim() && <p key={index}>{point.trim()}</p>;
                              }
                              return point.trim() && (
                                <div key={index} className="flex gap-2 items-baseline">
                                  <span className="text-primary">•</span>
                                  <span>{point.trim()}</span>
                                </div>
                              );
                            })}
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            ))
          )}
        </div>
      </div>
    </div>
  );
}